@page
@using Google.Apis.Drive.v3
@using Microsoft.Extensions.Configuration
@model StoryForce.Server.Pages.HtmlUploadModel
@inject IConfiguration Configuration
@{
    Layout = "Shared/_Layout";
}
@section HeadScripts
{

}
<div class="pt-1 pb-0" id="breadcrumbs-wrapper">
    <div class="container">
        <div class="row">
            <h5 class="breadcrumbs-title">
                Please use the form below to submit your files
            </h5>
        </div>

        <div class="row">
            <form class="col s12" enctype="multipart/form-data" asp-controller="Submissions" asp-action="Create">
                <div class="col s12 m12 l12">
                    <div class="card card-default scrollspy">
                        <div class="card-content">
                            <h4 class="card-title">
                                Submitter Information
                            </h4>
                            <div class="row">
                                <div class="input-field col s12 m6">
                                    <input type="text" class="validate" asp-for="Submission.SubmittedBy.Name" />
                                    <span asp-validation-for="Submission.SubmittedBy.Name"></span>
                                    <label asp-for="Submission.SubmittedBy.Name"></label>
                                </div>
                                <div class="input-field col s12 m6">
                                    <input type="email" class="validate" asp-for="Submission.SubmittedBy.Email" />
                                    <span asp-validation-for="Submission.SubmittedBy.Email"></span>
                                    <label asp-for="Submission.SubmittedBy.Email"></label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col s12 m12 l12">
                    <div class="card card-default scrollspy">
                        <div class="card-content">
                            <h4 class="card-title">
                                Please give your Submission a name and a description.
                            </h4>
                            <div class="row">
                                <div class="input-field col s12 m6">
                                    <input type="text" class="validate" asp-for="Submission.Title" />
                                    <span asp-validation-for="Submission.Title"></span>
                                    <label asp-for="Submission.Title"></label>
                                </div>
                                <div class="input-field col s12 m6">
                                    <textarea class="validate materialize-textarea" rows="5" asp-for="Submission.Description"></textarea>
                                    <span asp-validation-for="Submission.Description"></span>
                                    <label asp-for="Submission.Description"></label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col s12 m12 l12">
                    <div class="card card-default scrollspy">
                        <div class="card-content">
                            <h4 class="card-title">
                                Choose the files to upload
                            </h4>
                            <div class="row">
                                <div class="file-field input-field">
                                    <div class="btn">
                                        <span>Files</span>
                                        <input type="file" asp-for="Submission.FormFiles" class="form-control-file" id="uploadFiles" multiple />
                                    </div>
                                    <div class="file-path-wrapper">
                                        <input class="file-path validate" type="text" placeholder="Upload one or more files">
                                        <span asp-validation-for="Submission.FormFiles"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col s12 m12 l12">
                    <div class="card scrollspy">
                        <div class="card-content">
                            <h4 class="card-title">
                                Upload files from Google Drive
                            </h4>
                            <div class="row">
                                <div class="file-field input-field">
                                    <div class="btn" id="addGDriveFiles">
                                        <span>Google Drive</span>
                                        <input type="hidden" asp-for="Submission.GDriveOAuthToken" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="previewFiles">

                </div>

                <div class="col s12 m12 l12">
                    <div class="card card-default scrollspy">
                        <div class="card-content">
                            <h4 class="card-title">
                                Featured People
                            </h4>

                            <div class="row featured-person">
                                <div class="input-field col s12 m6">
                                    <input type="text" class="validate" asp-for="Submission.FeaturedPeople[0].Name" />
                                    <span asp-validation-for="Submission.FeaturedPeople[0].Name"></span>
                                    <label asp-for="Submission.FeaturedPeople[0].Name"></label>
                                </div>
                                <div class="input-field col s12 m6">
                                    <input type="number" class="validate" asp-for="Submission.FeaturedPeople[0].ClassOfYear" />
                                    <label asp-for="Submission.FeaturedPeople[0].ClassOfYear"></label>
                                </div>
                            </div>
                            <div class="row">
                                <a class="btn waves-effect add-person">Add Person</a>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col s12 m12 l12">
                    <div class="card card-default scrollspy">
                        <div class="card-content">
                            <h4 class="card-title">
                                Event Information
                            </h4>
                            <div class="row">
                                <div class="input-field col s12 m6">
                                    <input type="text" class="validate" asp-for="Submission.Event.Name" />
                                    <label asp-for="Submission.Event.Name"></label>
                                </div>
                                <div class="input-field col s12 m6">
                                    <input type="text" class="datepicker" asp-for="Submission.Event.Date" />
                                    <label asp-for="Submission.Event.Date"></label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="input-field col s12">
                        <button class="btn cyan waves-effect waves-light right" type="submit" id="submit-button">
                            Submit <i class="material-icons right">send</i>
                        </button>
                    </div>
                </div>
            </form>

            <div id="modal1" class="modal">
                <div class="modal-content">
                    <h4>Upload Progress</h4>
                    <div class="progress">
                        <div class="indeterminate"></div>
                    </div>
                    <div class="success-message hide">Your files were uploaded successfully!</div>
                </div>
                <div class="modal-footer hide">
                    <a class="modal-action modal-close waves-effect waves-green btn-flat">Close</a>
                </div>
            </div>
        </div>
    </div>
</div>


@section FooterScripts
{
    <!-- BEGIN PAGE VENDOR JS-->
    <script src="~/materialize-admin/app-assets/js/vendors.min.js"></script>
    <partial name="Shared/_ValidationScriptsPartial"/>
    <!-- END PAGE VENDOR JS-->

    <script>
        const localStorage = window.localStorage;
        const nameInput = document.getElementById("Submission_SubmittedBy_Name");
        const emailInput = document.getElementById("Submission_SubmittedBy_Email");
        const featuredPersonName = document.getElementById("Submission_FeaturedPeople_0__Name");
        const featuredPersonClass = document.getElementById("Submission_FeaturedPeople_0__ClassOfYear");

        const dt = new DataTransfer();
        const previewDiv = document.getElementById("previewFiles");
        const filesInput = document.getElementById("uploadFiles");
        const progressBar = document.querySelector(".progress");
        const successMessage = document.querySelector(".success-message");
        const modalFooter = document.querySelector(".modal-footer");

        function addFeaturedPerson(e) {
            const $fpQuery = $(".featured-person");
            const fpIndex = $fpQuery.length;
            let html = '<div class="row featured-person"><div class="input-field col s6"><input type="text" class="validate" id="Submission_FeaturedPeople_' + fpIndex + '__Name" name="Submission.FeaturedPeople[' + fpIndex + '].Name" /><label for="Submission_FeaturedPeople_' + fpIndex + '__Name"></label></div><div class="input-field col s6"><input type="number" class="validate" id="Submission_FeaturedPeople_' + fpIndex + '__ClassOfYear" name="Submission.FeaturedPeople[' + fpIndex + '].ClassOfYear" /><label for="Submission_FeaturedPeople_' + fpIndex + '__ClassOfYear"></label></div></div>';
            $(html).insertAfter(".featured-person:last");
        }

        function prePopulateFields() {
            if (!localStorage) {
                return;
            }

            nameInput.value = localStorage.getItem("name");
            emailInput.value = localStorage.getItem("email");
            featuredPersonName.value = localStorage.getItem("featured_name");
            featuredPersonClass.value = localStorage.getItem("featured_class");
        }

        function saveFieldsToLocalStorage() {
            if (!localStorage) {
                return;
            }

            localStorage.setItem("name", nameInput.value);
            localStorage.setItem("email", emailInput.value);
            localStorage.setItem("featured_name", featuredPersonName.value);
            localStorage.setItem("featured_class", featuredPersonClass.value);
        }

        $(document).ready(function() {
            prePopulateFields();

            $("#modal1").modal();
            $('.datepicker').datepicker();
            $(".add-person").bind("click", addFeaturedPerson);

            filesInput.addEventListener("change",
                function() {
                    for (let i = 0; i < filesInput.files.length; i++) {
                        const file = filesInput.files[i];
                        dt.items.add(file);
                        const desc = document.createElement("textarea");
                        desc.type = "text";
                        desc.name = `Submission.FileMetaDataList[${i}].Description`;
                        desc.classList.add("input-preview", "materialize-textarea", "media-desc");
                        desc.placeholder = "Enter a description";

                        const cardContainer = document.createElement("div");
                        cardContainer.classList.add("col", "s12", "m4", "l3");

                        const card = document.createElement("div");
                        card.classList.add("card");

                        const removeButton = document.createElement("a");
                        removeButton.classList.add("btn-floating", "mb-1", "waves-effect", "waves-light", "remove-file");
                        removeButton.dataset.index = i.toString();

                        const icon = document.createElement("i");
                        icon.classList.add("material-icons");
                        icon.innerText = "clear";

                        removeButton.appendChild(icon);

                        $(removeButton).bind("click",
                            function(e) {
                                const fileIndex = $(this).data("index");
                                const fileToRemove = filesInput.files[fileIndex];
                                dt.items.remove(fileIndex);
                                filesInput.files = dt.files;
                                $(cardContainer).remove();

                                const fileNames = $(".file-path").val().split(",");
                                let foundIndex = -1;
                                for (let si = 0; si < fileNames.length; si++) {
                                    if (fileToRemove.name === fileNames[si].trim()) {
                                        foundIndex = si;
                                        break;
                                    }
                                }

                                fileNames.splice(foundIndex, 1);
                                $(".file-path").val(fileNames);

                                //re-index the description input and remove button controls
                                const descriptionControls = document.querySelectorAll(".media-desc");
                                for (let di = 0; di < descriptionControls.length; di++) {
                                    const ctrl = descriptionControls[di];
                                    ctrl.name = `Submission.FileMetaDataList[${di}].Description`;

                                    const $ctrl = $(ctrl);
                                    $ctrl.parent().parent().find(".remove-file").attr("data-index", di);
                                }
                            });

                        const cardImage = document.createElement("div");
                        cardImage.classList.add("card-image");
                        cardImage.appendChild(removeButton);

                        const img = new Image();
                        const name = document.createElement("span");

                        const cardContent = document.createElement("div");
                        cardContent.classList.add("card-content");

                        try {
                            if (file.type.startsWith("image/")) {
                                const reader = new FileReader();
                                reader.onload = function(e) {
                                    img.src = null;
                                    img.src = e.target.result;
                                    img.className = "img-preview";
                                }
                                reader.readAsDataURL(file);
                            }
                        } catch (e) {
                            console.log(e.message);
                        }
                        name.classList.add("card-title", "font-weight-400");
                        name.innerText = file.name;

                        cardImage.appendChild(img);
                        card.appendChild(cardImage);
                        cardContent.appendChild(name);
                        cardContent.appendChild(desc);
                        card.appendChild(cardContent);
                        cardContainer.appendChild(card);
                        previewDiv.appendChild(cardContainer);
                    };
                }
            );

            const request = new XMLHttpRequest();
            request.timeout = 1000 * 60 * 60; // 1 hour

            //request.upload.addEventListener("progress",
            //    function(e) {
            //        const position = e.loaded || e.position;
            //        const percentComplete = Math.ceil(position / e.total) * 100;

            //        console.log(percentComplete + "% completed.");
            //        //const progressBar = document.querySelector(".progress-bar");
            //        //const status = document.querySelector(".status");
            //        //progressBar.setAttribute("style", `width: ${percentComplete}%`);
            //        //status.innerText = percentComplete + "%";
            //    });

            progressBar.classList.remove("hide");
            successMessage.classList.add("hide");
            modalFooter.classList.add("hide");

            request.addEventListener("load",
                function(e) {
                    console.log(e.target.responseText);
                    console.log(request.response);
                    const progressBar = document.querySelector(".progress");
                    const successMessage = document.querySelector(".success-message");

                    progressBar.classList.add("hide");
                    successMessage.classList.remove("hide");
                    modalFooter.classList.remove("hide");
                });

            request.addEventListener("error",
                function(e) {
                    console.log(`Error: ${request.response}`);
                });

            request.addEventListener("abort",
                function(e) {
                    console.log("Upload aborted");
                    console.log(request.response);
                });

            const formElement = document.querySelector("form");
            const $form = $(formElement);

            formElement.addEventListener("submit",
                function(e) {
                    e.preventDefault();

                    $.validator.unobtrusive.parse($form);
                    $form.validate();
                    if (!$form.valid()) {
                        return;
                    }

                    saveFieldsToLocalStorage();

                    const formData = new FormData(formElement);
                    request.open("POST", "/api/submissions");
                    request.send(formData);
                    $("#modal1").modal("open");
                }
            );
        });
    </script>

    @{
        var pickerConfig = Configuration.GetSection("Google");
    }
    <script type="text/javascript" src="https://apis.google.com/js/api.js"></script>
    <script type="text/javascript">
        window.onload = function() {
            // The Browser API key obtained from the Google API Console.
            // Replace with your own Browser API key, or your own key.
            var developerKey = "@pickerConfig["DevKey"]";

            // The Client ID obtained from the Google API Console. Replace with your own Client ID.
            var clientId = "@pickerConfig["ClientId"]";

            // Replace with your own project number from console.developers.google.com.
            // See "Project number" under "IAM & Admin" > "Settings"
            var appId = "@pickerConfig["ProjectId"]";

            // Scope to use to access user's Drive items.
            var scope = ["@DriveService.Scope.Drive"];

            var pickerApiLoaded = false;
            var oauthToken;

            const button = document.getElementById("addGDriveFiles");
            button.addEventListener("click",
                function(e) {
                    loadPicker();
                }
            );

            // Use the Google API Loader script to load the google.picker script.
            function loadPicker() {
                gapi.load('auth', { 'callback': onAuthApiLoad });
                gapi.load('picker', { 'callback': onPickerApiLoad });
            }

            function onAuthApiLoad() {
                window.gapi.auth.authorize(
                    {
                        'client_id': clientId,
                        'scope': scope,
                        'immediate': false
                    },
                    handleAuthResult);
            }

            function onPickerApiLoad() {
                pickerApiLoaded = true;
                createPicker();
            }

            function handleAuthResult(authResult) {
                if (authResult && !authResult.error) {
                    oauthToken = authResult.access_token;
                    if (oauthToken) {
                        const accessToken = document.getElementById("Submission_GDriveOAuthToken");
                        accessToken.value = oauthToken;
                    }
                    createPicker();
                }
            }

            // Create and render a Picker object for searching images.
            function createPicker() {
                if (pickerApiLoaded && oauthToken) {
                    var view = new google.picker.View(google.picker.ViewId.DOCS);
                    view.setMimeTypes("image/png,image/jpeg,image/jpg");
                    var picker = new google.picker.PickerBuilder()
                        .enableFeature(google.picker.Feature.NAV_HIDDEN)
                        .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
                        .setAppId(appId)
                        .setOAuthToken(oauthToken)
                        .addView(view)
                        .addView(new google.picker.DocsUploadView())
                        .setDeveloperKey(developerKey)
                        .setCallback(pickerCallback)
                        .build();
                    picker.setVisible(true);
                }
            }

            // A simple callback implementation.
            function pickerCallback(data) {
                if (data.action === google.picker.Action.PICKED) {
                    //var fileId = data.docs[0].id;
                    handleFiles(data.docs);
                }
            }

            function handleFiles(docs) {
                for (let i = 0; i < docs.length; i++) {
                    const file = new File([], docs[i].name, { type: '', lastModified: Date.now() });
                    dt.items.add(file);
                    const desc = document.createElement("textarea");
                    desc.type = "text";
                    desc.name = `Submission.FileMetaDataList[${filesInput.files.length + i}].Description`;
                    desc.classList.add("input-preview", "materialize-textarea", "media-desc");
                    desc.placeholder = "Enter a description";

                    const cardContainer = document.createElement("div");
                    cardContainer.classList.add("col", "s12", "m4", "l3");

                    const card = document.createElement("div");
                    card.classList.add("card");

                    const removeButton = document.createElement("a");
                    removeButton.classList.add("btn-floating", "mb-1", "waves-effect", "waves-light", "remove-file");
                    removeButton.dataset.index = (filesInput.files.length + i).toString();

                    const icon = document.createElement("i");
                    icon.classList.add("material-icons");
                    icon.innerText = "clear";

                    removeButton.appendChild(icon);

                    $(removeButton).bind("click",
                        function(e) {
                            const fileIndex = $(this).data("index");
                            const fileToRemove = filesInput.files[fileIndex];
                            dt.items.remove(fileIndex);
                            filesInput.files = dt.files;
                            $(cardContainer).remove();

                            const fileNames = $(".file-path").val().split(",");
                            let foundIndex = -1;
                            for (let si = 0; si < fileNames.length; si++) {
                                if (fileToRemove.name === fileNames[si].trim()) {
                                    foundIndex = si;
                                    break;
                                }
                            }

                            fileNames.splice(foundIndex, 1);
                            $(".file-path").val(fileNames);

                            //re-index the description input and remove button controls
                            const descriptionControls = document.querySelectorAll(".media-desc");
                            const fileIdControls = document.querySelectorAll(".g-drive-file");
                            const providerControls = document.querySelectorAll(".storage-provider");
                            for (let di = 0; di < descriptionControls.length; di++) {
                                const ctrl = descriptionControls[di];
                                ctrl.name = `Submission.FileMetaDataList[${di}].Description`;
                                fileIdControls[di].name = `Submission.FileMetaDataList[${di}].FileId`;
                                providerControls[di].name = `Submission.FileMetaDataList[${di}].StorageProvider`;

                                const $ctrl = $(ctrl);
                                $ctrl.parent().parent().find(".remove-file").attr("data-index", di);
                            }
                        });

                    const cardImage = document.createElement("div");
                    cardImage.classList.add("card-image");
                    cardImage.appendChild(removeButton);

                    const img = document.createElement("img");
                    const name = document.createElement("span");

                    const cardContent = document.createElement("div");
                    cardContent.classList.add("card-content");

                    const fileIdInput = document.createElement("input");
                    fileIdInput.type = "hidden";
                    fileIdInput.classList.add("g-drive-file");
                    fileIdInput.name = `Submission.FileMetaDataList[${filesInput.files.length + i}].FileId`;
                    fileIdInput.value = docs[i].id;

                    const providerInput = document.createElement("input");
                    providerInput.type = "hidden";
                    providerInput.classList.add("storage-provider");
                    providerInput.name = `Submission.FileMetaDataList[${filesInput.files.length + i}].StorageProvider`;
                    providerInput.value = 1; //Google Drive

                    //img.src = `https://lh3.google.com/u/1/d/${docs[i].id}=w326-h245-p-k-nu-iv1?access_token=${oauthToken}`;
                    img.src = `https://drive.google.com/uc?export=download&id=${docs[i].id}`;
                    img.className = "img-preview";

                    name.classList.add("card-title", "font-weight-400");
                    name.innerText = file.name;

                    cardImage.appendChild(img);
                    card.appendChild(cardImage);
                    cardContent.appendChild(name);
                    cardContent.appendChild(desc);
                    cardContent.appendChild(fileIdInput);
                    cardContent.appendChild(providerInput);
                    card.appendChild(cardContent);
                    cardContainer.appendChild(card);
                    previewDiv.appendChild(cardContainer);
                }
                filesInput.files = dt.files;
            }
        }
    </script>
}
